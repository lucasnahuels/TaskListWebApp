@page "/"
@inject HttpClient client

@if (tasks == null)
{
    <text>Loading... </text>
}
else if (tasks.Length == 0)
{
    <text>No tasks found </text>
}
else
{
    var count = 0;
    <div class="row">
    @foreach (var item in tasks)
    {
        <div class="col-6 col-md-3" style="">
            <div class="card" style="">
                <h5 class="card-title">Task #@item.Id</h5>
                <h5 class="card-title">@item.Title</h5>
                <div class="card-body" style="">
                    <p class="card-text">
                    @if (item.Done)
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-check" style='color: green' viewBox="0 0 16 16">
                            <path d="M10.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.267.267 0 0 1 .02-.022z" />
                        </svg>
                        <br />

                        <a href="#" class="btn btn-primary">Needs work</a>
                    }
                    else
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-x" style='color: red' viewBox="0 0 16 16">
                            <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
                        </svg>
                        <br />
                        <a href="#" class="btn btn-primary">Mark as done</a>
                    }
                    </p>
                </div>
            </div>
        </div>
    }
    </div>
}

@code {
    ToDoTask[] tasks { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    async Task LoadTasks()
    {
        tasks = await client.GetFromJsonAsync<ToDoTask[]>("task");
    }
}
